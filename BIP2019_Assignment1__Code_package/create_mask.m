function MASK = create_mask(IMG)
%  IMG: RGB image in uint8 format (from 0 to 255) 
%
% MASK: logical array (only zeros and ones).
%        0 if not card,
%        1 if card

%%% CREATE BLACK MASK WITH COLOR THRESHOLDER

% Auto-generated by colorThresholder app on 08-Oct-2019
%------------------------------------------------------

% Create mask based on selected regions of interest on point cloud projection
I = double(IMG);
[m,n,~] = size(I);
polyBW = false([m,n]);
I = reshape(I,[m*n 3]);

% Project 3D data into 2D projected view from current camera view point within app
% Translate the data to the mean of the current image within app
shiftVec = [15.984101 96.306823 72.095519];
I = I - shiftVec;
I = [I ones(size(I,1),1)]';

% Apply transformation matrix
tMat = [0.001952 -0.001134 0.000000 -0.286483;
    -0.000001 -0.000003 0.002734 -0.499438;
    0.000753 0.002939 0.000002 8.013346;
    0.000000 0.000000 0.000000 1.000000];

J = (tMat*I)';

% Apply polygons drawn on point cloud in app


% Define each manually generated ROI
hPoints(1).data = [-0.166988 -0.479131;
    -0.199656 -0.769518;
    -0.087899 -0.749211;
    0.044491 -0.204990];

% Iteratively apply each ROI
for ii = 1:length(hPoints)
    if size(hPoints(ii).data,1) > 2
        in = inpolygon(J(:,1),J(:,2),hPoints(ii).data(:,1),hPoints(ii).data(:,2));
        in = reshape(in,size(polyBW));
        polyBW = polyBW | in;
    end
end

blackMask = polyBW;

%%% END OF CREATE BLACK MASK

% Create mask based on chosen histogram thresholds
MASK = (IMG(:,:,1) >= 128) | blackMask;

end
